using UnityEngine;
using System;
using System.Text;
using System.Net.WebSockets;
using System.Threading;
using System.Threading.Tasks;
using TMPro;

[Serializable]
public class WebSocketMessage
{
    public string accessToken;
    public string userId;
    public string error;
}

public class WebSocketManager : MonoBehaviour
{
    private ClientWebSocket ws;
    public TMP_Text statusText;
    public GoogleAuthen googleAuthen; 

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô OnSignIn ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    public async void ConnectWebSocket()
    {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î WebSocket ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô
        if (ws != null && ws.State == WebSocketState.Open)
        {
            Debug.Log("üîπ WebSocket is already open. Closing existing connection...");
            await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "Reconnecting", CancellationToken.None);
        }

        ws = new ClientWebSocket();
        try
        {
            Debug.Log("üåê Connecting to WebSocket...");
            await ws.ConnectAsync(new Uri("ws://smith11.ce.kmitl.ac.th:8282"), CancellationToken.None);
            Debug.Log("‚úÖ Connected to WebSocket Server");

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
            _ = ListenForMessages();
        }
        catch (Exception e)
        {
            Debug.LogError("‚ùå WebSocket Error: " + e.Message);
        }
    }

    private async Task ListenForMessages()
    {
        var buffer = new byte[1024];
        while (ws.State == WebSocketState.Open)
        {
            try
            {
                var result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                Debug.Log("üì° Received from Server: " + message);

                WebSocketMessage wsData = null;
                try
                {
                    wsData = JsonUtility.FromJson<WebSocketMessage>(message);
                }
                catch (Exception ex)
                {
                    Debug.LogWarning("‚ùå Could not parse WebSocket JSON: " + ex.Message);
                }

                if (wsData != null)
                {
                    Debug.Log("‚úÖ Parsed Data: userId=" + wsData.userId + ", error=" + (wsData.error ?? "null"));

                    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö error ‡∏à‡∏≤‡∏Å WebSocket
                    if (!string.IsNullOrEmpty(wsData.error))
                    {
                        Debug.LogError("‚ùå WebSocket received error: " + wsData.error);

                        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å UI ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        try
                        {
                            ManagementCanvas managementCanvas = FindObjectOfType<ManagementCanvas>();
                            if (managementCanvas != null)
                            {
                                managementCanvas.ShowUiNotifyErrorLogin();
                                Debug.Log("üîπ ShowUiNotifyErrorLogin() called.");
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.LogWarning("‚ö†Ô∏è ManagementCanvas not found: " + ex.Message);
                        }
                    }
                    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ userId ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                    else if (!string.IsNullOrEmpty(wsData.userId))
                    {
                        Debug.Log("‚úÖ User logged in via WebSocket: " + wsData.userId);

                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        if (statusText != null)
                        {
                            statusText.text = "Login Successful via WebSocket!";
                        }

                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ManagementCanvas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö userId ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á UI
                        try
                        {
                            ManagementCanvas managementCanvas = FindObjectOfType<ManagementCanvas>();
                            if (managementCanvas != null)
                            {
                                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userId ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß ManagementCanvas
                                managementCanvas.UpdateUserId(wsData.userId);

                                // ‡πÅ‡∏™‡∏î‡∏á Pop-Up ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                managementCanvas.ShowUiNotifyLogin();
                                Debug.Log("üîπ ShowUiNotifyLogin() called.");
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.LogWarning("‚ö†Ô∏è ManagementCanvas not found: " + ex.Message);
                        }

                        // ‡∏™‡πà‡∏á Log ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                        if (googleAuthen != null)
                        {
                            Debug.Log("üìå Calling SendLogToServer() from WebSocketManager...");

                            // googleAuthen ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á log (‡∏û‡∏£‡πâ‡∏≠‡∏° userId) ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                            googleAuthen.StartCoroutine(googleAuthen.SendLogToServer(wsData.userId));
                        }
                        else
                        {
                            Debug.LogError("‚ùå googleAuthen is NULL, cannot send log.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Debug.LogError("‚ùå Error receiving WebSocket message: " + e.Message);
                break;
            }

            // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô CPU overload ‡πÉ‡∏ô while loop
            await Task.Delay(10);
        }
    }
}
